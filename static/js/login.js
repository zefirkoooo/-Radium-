document.addEventListener('DOMContentLoaded', function() {
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    removeDuplicateMessages();

    const searchInput = document.getElementById('user-search');
    const searchBtn = document.getElementById('search-btn');
    const suggestions = document.getElementById('search-suggestions');
    const searchResults = document.getElementById('search-results');
    const resultsUsername = document.getElementById('results-username');
    const resultsContent = document.getElementById('results-content');
    const closeResults = document.getElementById('close-results');

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π
    function removeDuplicateMessages() {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ base.html (–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        const baseMessages = document.querySelector('div[style*="padding"] > .messages');
        if (baseMessages) {
            baseMessages.remove();
        }

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ–≥–∏–Ω–∞
        const cardMessages = document.querySelector('.card .messages');
        if (cardMessages) {
            const messages = Array.from(cardMessages.children);
            const uniqueMessages = new Map();

            messages.forEach(message => {
                const text = message.textContent.trim();
                const className = message.className;
                const key = `${className}-${text}`;

                if (!uniqueMessages.has(key)) {
                    uniqueMessages.set(key, message);
                } else {
                    message.remove();
                }
            });
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (!searchInput || !searchBtn || !suggestions || !searchResults || !resultsUsername || !resultsContent || !closeResults) {
        console.warn('Search elements not found on this page');
        return;
    }

    let searchTimeout;

    // –ê–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const query = this.value.trim();

        if (query.length >= 2) {
            searchTimeout = setTimeout(() => {
                fetchSuggestions(query);
            }, 300);
        } else {
            suggestions.innerHTML = '';
            suggestions.style.display = 'none';
        }
    });

    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
    searchBtn.addEventListener('click', function() {
        const username = searchInput.value.trim();
        if (username) {
            searchUserCalendar(username);
        }
    });

    // –ü–æ–∏—Å–∫ –ø–æ Enter
    searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            const username = this.value.trim();
            if (username) {
                searchUserCalendar(username);
            }
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    closeResults.addEventListener('click', function() {
        searchResults.style.display = 'none';
        searchInput.value = '';
        suggestions.innerHTML = '';
        suggestions.style.display = 'none';
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.search-input-wrapper')) {
            suggestions.style.display = 'none';
        }
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–æ–∫
    function fetchSuggestions(query) {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (window.currentSuggestionRequest) {
            window.currentSuggestionRequest.abort();
        }

        const controller = new AbortController();
        window.currentSuggestionRequest = controller;

        fetch(`/api/search-users/?q=${encodeURIComponent(query)}`, {
            method: 'GET',
            headers: {
                'X-CSRFToken': getCookie('csrftoken'),
            },
            signal: controller.signal
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.users && data.users.length > 0) {
                showSuggestions(data.users);
            } else {
                suggestions.innerHTML = '<div class="suggestion-item no-results">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                suggestions.style.display = 'block';
            }
        })
        .catch(error => {
            if (error.name !== 'AbortError') {
                console.error('Error fetching suggestions:', error);
                suggestions.innerHTML = '<div class="suggestion-item error">–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</div>';
                suggestions.style.display = 'block';
            }
        })
        .finally(() => {
            window.currentSuggestionRequest = null;
        });
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–æ–∫
    function showSuggestions(users) {
        suggestions.innerHTML = '';
        users.forEach(user => {
            const suggestion = document.createElement('div');
            suggestion.className = 'suggestion-item';
            suggestion.textContent = user.display_name || user.username;
            suggestion.addEventListener('click', function() {
                searchInput.value = user.username;
                suggestions.innerHTML = '';
                suggestions.style.display = 'none';
                searchUserCalendar(user.username);
            });
            suggestions.appendChild(suggestion);
        });
        suggestions.style.display = 'block';
    }

    // –ü–æ–∏—Å–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function searchUserCalendar(username) {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (window.currentCalendarRequest) {
            window.currentCalendarRequest.abort();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        resultsContent.innerHTML = '<div class="loading"><i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∑–∫–∞...</div>';
        resultsUsername.textContent = `–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–∏—Ç–∞–Ω–∏—è: ${username}`;
        searchResults.style.display = 'block';

        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        suggestions.style.display = 'none';

        const controller = new AbortController();
        window.currentCalendarRequest = controller;

        fetch(`/api/user-calendar/?username=${encodeURIComponent(username)}`, {
            method: 'GET',
            headers: {
                'X-CSRFToken': getCookie('csrftoken'),
            },
            signal: controller.signal
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                showUserCalendar(data.calendar);
            } else {
                resultsContent.innerHTML = `<div class="error"><i class="fas fa-exclamation-triangle"></i> ${data.error}</div>`;
            }
        })
        .catch(error => {
            if (error.name !== 'AbortError') {
                console.error('Error fetching calendar:', error);
                resultsContent.innerHTML = '<div class="error"><i class="fas fa-exclamation-triangle"></i> –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</div>';
            }
        })
        .finally(() => {
            window.currentCalendarRequest = null;
        });
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
    function showUserCalendar(calendar) {
        let html = '';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        if (calendar.current_week && calendar.current_week.length > 0) {
            html += '<div class="week-section current-week-only">';
            html += '<h5><i class="fas fa-calendar-week"></i> –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é</h5>';
            html += generateWeekHTML(calendar.current_week);
            html += '</div>';
        } else {
            html = '<div class="no-data"><i class="fas fa-calendar-times"></i> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ–Ω—é –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é</div>';
        }

        resultsContent.innerHTML = html;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –Ω–µ–¥–µ–ª–∏
    function generateWeekHTML(week) {
        let html = '<div class="week-grid">';

        week.forEach(day => {
            const hasMenu = day.has_menu !== false;
            const cardClass = hasMenu ? 'day-card-mini' : 'day-card-mini no-menu';

            html += `
                <div class="${cardClass}">
                    <h6><i class="fas fa-calendar-day"></i> ${day.date} (${day.day_name})</h6>
                    <div class="meals-mini">
            `;

            if (!hasMenu) {
                html += '<div class="meal-item no-menu-item"><i class="fas fa-calendar-times"></i> –ú–µ–Ω—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</div>';
            } else if (day.selections.not_eating) {
                html += '<div class="meal-item not-eating"><i class="fas fa-times-circle"></i> –ù–µ –µ–º</div>';
            } else {
                let hasSelections = false;

                if (day.selections.salad) {
                    html += `<div class="meal-item">ü•ó ${day.selections.salad}</div>`;
                    hasSelections = true;
                }
                if (day.selections.soup) {
                    html += `<div class="meal-item">üç≤ ${day.selections.soup}</div>`;
                    hasSelections = true;
                }
                if (day.selections.main) {
                    html += `<div class="meal-item">üçñ ${day.selections.main}</div>`;
                    hasSelections = true;
                }
                if (day.selections.side) {
                    html += `<div class="meal-item">ü•î ${day.selections.side}</div>`;
                    hasSelections = true;
                }
                if (day.selections.bakery) {
                    html += `<div class="meal-item">ü•® ${day.selections.bakery}</div>`;
                    hasSelections = true;
                }

                if (!hasSelections) {
                    html += '<div class="meal-item no-selection"><i class="fas fa-question-circle"></i> –ë–ª—é–¥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</div>';
                }
            }

            html += `
                    </div>
                </div>
            `;
        });

        html += '</div>';
        return html;
    }
});